# -*- coding: utf-8 -*-
"""whisper_pipeline.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VADfWivQOHMvs05YTth9Ni569ohp2AVU
"""

!pip install git+https://github.com/huggingface/transformers
!pip install librosa
!sudo apt install ffmpeg
!pip install torchaudio ipywebrtc notebook
!pip install -q gradio
!pip install pytube
!jupyter nbextension enable --py widgetsnbextension

import os
import torch
from transformers import pipeline

MODEL_NAME = "biodatlab/whisper-th-medium-combined"
lang = "th"

device = 0 if torch.cuda.is_available() else "cpu"

pipe = pipeline(
    task="automatic-speech-recognition",
    model=MODEL_NAME,
    chunk_length_s=30,
    device=device,
)

from ipywebrtc import AudioRecorder, CameraStream
from google.colab import output
output.enable_custom_widget_manager()

#transcript from yt link
import pytube as pt

def yt_transcribe(yt_url: str):
    """Transcribe a given Youtube URL"""
    yt = pt.YouTube(yt_url)
    stream = yt.streams.filter(only_audio=True)[0]
    stream.download(filename="audio.mp3")
    text = pipe(
        "audio.mp3",
        generate_kwargs={"language": "<|th|>", "task": "transcribe"},
        return_timestamps=False,
        batch_size=16
    )
    return text

url = "https://www.youtube.com/watch?v=tdoLLBTZauE&ab_channel=Carnest"

transcriptions = yt_transcribe(url)
print(transcriptions["text"])

# Function to detect highlighted words in the transcript
def detect_highlighted_words(transcript, keywords):
    highlighted_words = []
    for word in keywords:
        if word in transcriptions["text"]:
            highlighted_words.append(word)
    return highlighted_words

if __name__ == "__main__":
    audio_file = "path_to_your_audio_file.wav"
    keywords = ["เบนซิน", "ดีเซล", "เก้าสิบห้า", "เก้าห้า", "แก๊สโซฮอล์", "แก๊ส", "เก้าหนึ่ง", "เก้าสิบเอ็ด", "เก้าเอ็ด", "เบนซีน"]

    transcript = transcriptions
    if transcript:
        highlighted = detect_highlighted_words(transcript, keywords)
        if highlighted:
            print("Highlighted words found:")
            print(highlighted)
        else:
            print("No highlighted words found.")
    else:
        print("Transcription failed.")

def cut_text_before_keywords(text, keywords):
    # Initialize variables to track the index of the first occurrence of any keyword
    first_keyword_index = len(text)  # Initialize with a large value

    for keyword in keywords:
        # Find the index of the current keyword in the text
        keyword_index = text.find(keyword)

        # Update the first_keyword_index if a keyword is found earlier in the text
        if keyword_index != -1 and keyword_index < first_keyword_index:
            first_keyword_index = keyword_index

    if first_keyword_index < len(text):
        # Extract the portion of text before the first keyword
        text_before_keywords = text[:first_keyword_index].strip()
        return text_before_keywords
    else:
        # None of the keywords were found in the text
        return None

if __name__ == "__main__":
    keyword = ['ค่ะ', 'ครับ']

    result = cut_text_before_keywords(transcriptions["text"], keyword)

    if result is not None:
        print("Text before the first keyword:")
        print(result)
    else:
        print("None of the keywords were found in the text.")

print(transcriptions["text"])

import re

def yt_transcribe(yt_url: str):
    """Transcribe a given Youtube URL"""
    yt = pt.YouTube(yt_url)
    stream = yt.streams.filter(only_audio=True)[0]
    stream.download(filename="audio.mp3")
    text = pipe(
        "audio.mp3",
        generate_kwargs={"language": "<|th|>", "task": "transcribe"},
        return_timestamps=False,
        batch_size=16
    )

    # Combine the transcribed text into a single string
    full_transcription = " ".join(text["text"])

    # Use regular expressions to extract text between "ป้ายทะเบียน" and "ค่ะ"
    pattern = r"ป้ายทะเบียน(.*?)จังหวัด"
    extracted_text = re.search(pattern, full_transcription)

    if extracted_text:
        return extracted_text.group(1).strip()
    else:
        return "No matching text found."

url = "https://www.youtube.com/watch?v=28btzga2Odg&ab_channel=PPAInnovationCo.%2CLtd."
transcriptions = yt_transcribe(url)
print(transcriptions)